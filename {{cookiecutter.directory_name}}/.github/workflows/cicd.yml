name: CI/CD

on: push

jobs:
  test:
    runs-on: ubuntu-20.04
    env:
      POETRY_VERSION: 1.3.2
      PYTHON_VERSION: 3.9
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install python dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Code Quality (iSort, PyLint, MyPy, Black)
      run: ./scripts/check

    - name: Tests
      run: poetry run pytest

  deploy:
    needs: test
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      SERVERLESS_VERSION: 3.26.0
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    steps:
    - name: Set env STAGE
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
      run: |
        echo $BRANCH_NAME
        if [[ $BRANCH_NAME == 'develop' ]]; then
            echo "STAGE=dev" >> "$GITHUB_ENV"
        elif [[ $BRANCH_NAME == 'staging' ]]; then
            echo "STAGE=staging" >> "$GITHUB_ENV"
        elif [[ $BRANCH_NAME == 'master' ]]; then
            echo "STAGE=prod" >> "$GITHUB_ENV"
        else
            echo "STAGE=dev" >> "$GITHUB_ENV"
        fi
    - uses: actions/checkout@v3
    - name: Install NodeJS for serverless framework
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
        cache: 'npm'
    # - name: Cache global serverless installation
    #   id: cached-serverless
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/node_modules # the path depends on the OS
    #     key: serverless-cache-${{ runner.os }}-version-${{ env.SERVERLESS_VERSION }}
    - name: Install serverless framework
      # if: steps.cached-serverless.outputs.cache-hit != 'true'
      run: |
        npm i -g serverless@${{env.SERVERLESS_VERSION}}
        which serverless
    - name: Install serverless plugins
      run: npm ci
    - name: Configure AWS account
      id: config_aws
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION_NAME
    - name: AWS ECR Login
      run: |
        aws ecr get-login-password --region $AWS_REGION_NAME | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_NAME.amazonaws.com
        docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_NAME.amazonaws.com/{{cookiecutter.ecr_repository_base_name}}-${{ env.STAGE }}:{{cookiecutter.lambda_docker_image_tag}} || true
    - name: Deploy
      run: SLS_DEBUG="*" serverless deploy --region $AWS_REGION_NAME --stage ${{ env.STAGE }} --aws-profile 'default'
