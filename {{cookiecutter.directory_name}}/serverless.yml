service: {{cookiecutter.service_name}}

useDotenv: true # If set to 'true', environment variables will be automatically loaded from .env files

package:
  individually: true

plugins:
  - serverless-domain-manager
  # - serverless-offline
  # - serverless-plugin-lambda-insights
  - serverless-plugin-log-retention

custom:
  baseDomain: {{cookiecutter.base_domain}}
  dev:
    domainNameCondition: api-develop.${self:custom.baseDomain}
  staging:
    domainNameCondition: api-staging.${self:custom.baseDomain}
  prod:
    domainNameCondition: api.${self:custom.baseDomain}

  customDomain: # https://github.com/amplify-education/serverless-domain-manager
    enabled: false
    domainName: ${self:custom.${self:provider.stage}.domainNameCondition}
    stage: ${self:provider.stage}
    basePath: "" # For some reason can not work with api mapping
    certificateArn: ${env:ACM_ARN,""}
    createRoute53Record: true
    endpointType: edge
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: false

  logRetentionInDays: {{cookiecutter.log_retention_in_days}} # This is to make sure that your cloudwatch log storage will stay in a reasonable size (it can get pretty expensive...)

provider:
  name: aws
  profile: ${opt:aws-profile, "default"}
  region: ${env:AWS_REGION_NAME, "eu-central-1"}
  stage: ${opt:stage, "dev"}
  runtime: python3.9
  memorySize: 1024 # MB
  timeout: 30
  endpointType: edge
  lambdaHashingVersion: 20201221
  # apiGateway:
  #   metrics: true
  tracing:
    apiGateway: true
  logs:
    restApi: true
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      {{cookiecutter.lambda_docker_image_tag}}:
        path: .
        # Dockerfile that will be used when building the image locally (default: 'Dockerfile'), relative to path defined above
        file: Dockerfile
        cacheFrom:
          # This is the path where the serverless framework will put the image in ECR when created for the first time.
          - ${AWS::AccountId}.dkr.ecr.${self:provider.region}.amazonaws.com/{{cookiecutter.ecr_repository_base_name}}-${self:provider.stage}:{{cookiecutter.lambda_docker_image_tag}}
  iamRoleStatements:  # handles the permissions of the lambda
    # XRay
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

functions:
  app:
    image:
      name: {{cookiecutter.lambda_docker_image_tag}}
    environment:
      STAGE: ${self:provider.stage}

    events:
      - http:
          method: any
          path: /
      - http:
          method: any
          path: /{proxy+}